#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

def fix_latex_inline(line):
    """
    Replace inline LaTeX like $\sim 30\%$ → ∼30%
    Preserve $$...$$ blocks.
    """
    def replacer(match):
        content = match.group(1)
        content = content.replace(r"\sim", "∼").replace(r"\%", "%")
        return content

    return re.sub(r"\$(.*?)\$", lambda m: replacer(m), line)

def replace_superscripts(line, use_html=True):
    """
    Replace ^i, ^c, ^s with superscript forms (Unicode or HTML)
    """
    if use_html:
        sup_map = {'^i': '<sup><em>i</em></sup>',
                   '^c': '<sup><em>c</em></sup>',
                   '^s': '<sup><em>s</em></sup>'}
    else:
        sup_map = {'^i': 'ⁱ', '^c': 'ᶜ', '^s': 'ˢ'}

    for key, val in sup_map.items():
        line = line.replace(key, val)
    return line

if __name__ == "__main__":
    with open("README.md", "r") as f:
        lines = f.read().splitlines()

    results = []
    prev = ""
    for i, line in enumerate(lines):
        stripped = line.strip()

        if stripped.startswith("=") or stripped.startswith("<span> ="):
            continue

        line = fix_latex_inline(line)
        line = replace_superscripts(line, use_html=True)  # Set to False for Unicode

        # Remove blank lines between bullet items
        if (
            stripped == "" and
            prev.strip().startswith(("-", "*", "1.")) and
            i + 1 < len(lines) and lines[i + 1].strip().startswith(("-", "*", "1."))
        ):
            continue

        # Collapse multiple blank lines elsewhere
        if stripped == "" and prev.strip() == "":
            continue

        # Fix section headers
        if line.startswith("**") and prev.strip() == "":
            parts = line.split("**")
            if len(parts) > 2 and not parts[1].startswith("Anand"):
                results += ["## " + parts[1], ""] + parts[2:]
                prev = line
                continue

        results.append(line)
        prev = line

    with open("README.md", "w") as f:
        f.write("\n".join(results))
