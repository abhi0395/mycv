#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
import importlib.util
from datetime import date
from operator import itemgetter

here = os.path.dirname(os.path.abspath(__file__))
spec = importlib.util.spec_from_file_location(
    "utf8totex", os.path.join(here, "utf8totex.py")
)
utf8totex = importlib.util.module_from_spec(spec)
spec.loader.exec_module(utf8totex)

JOURNAL_MAP = {
    "arxiv e-prints": "ArXiv",
    # "Monthly Notices of the Royal Astronomical Society": "\\mnras",
    # "The Astrophysical Journal": "\\apj",
    # "The Astronomical Journal": "\\aj",
    # "Publications of the Astronomical Society of the Pacific": "\\pasp",
    "iau general assembly": "IAU",
    "american astronomical society meeting abstracts": "AAS",
}


def format_pub(args):
    ind, pub = args
    fmt = "\\item[{{\\color{{numcolor}}\\scriptsize{0}}}] ".format(ind)
    nauth = [i for i in range(len(pub["authors"])) if "Anand, A" in pub["authors"][i]][0]
    
    pub["authors"][nauth] = "\\textbf{Anand, Abhijeet}"
    
    if len(pub["authors"]) > 5:
        fmt += "; ".join(pub["authors"][:5])
        fmt += "; \\etal"
        if nauth >= 6:
            fmt += "\\ (incl.\\ \\textbf{A. Anand})"
    elif len(pub["authors"]) > 1:
        fmt += "; ".join(pub["authors"][:-1])
        fmt += "; \\& " + pub["authors"][-1]
    else:
        fmt += pub["authors"][0]

    fmt += ", {0}".format(pub["year"])

    if pub["doi"] is not None:
        fmt += ", \\doi{{{0}}}{{{1}}}".format(pub["doi"], pub["title"])
    else:
        fmt += ", " + pub["title"]

    if not pub["pub"] in [None, "ArXiv e-prints"]:
        fmt += ", " + JOURNAL_MAP.get(
            pub["pub"].strip("0123456789# ").lower(), pub["pub"]
        )

    if pub["volume"] is not None:
        fmt += ", \\textbf{{{0}}}".format(pub["volume"])

    if pub["page"] is not None:
        fmt += ", {0}".format(pub["page"])

    if pub["arxiv"] is not None:
        fmt += " (\\arxiv{{{0}}})".format(pub["arxiv"])

    if pub["citations"] >= 1:
        fmt += " [\\href{{{0}}}{{{1} citations}}]".format(pub["url"], pub["citations"])

    return fmt


if __name__ == "__main__":
    with open("data/pubs.json", "r") as f:
        pubs = json.load(f)
    pubs = sorted(pubs, key=itemgetter("pubdate"), reverse=True)
    pubs = [
        p
        for p in pubs
        if (
            p["doctype"] in ["article", "eprint"]
            and p["pub"] != "Zenodo Software Release"
        )
    ]
    ref = [p for p in pubs if p["doctype"] == "article"]
    unref = [p for p in pubs if p["doctype"] == "eprint"]
    
    # Compute citation stats
    nrefpapers = len(ref)
    ntotal = len(ref)+len(unref)
    nfirst = sum(1 for p in pubs if "Anand, A" in p["authors"][0])
    cites = sorted((p["citations"] for p in pubs), reverse=True)
    ncitations = sum(cites)
    hindex = sum(c >= i for i, c in enumerate(cites))

    summary = (
        "Total: {1} / refereed: {2} / first author: {3} / citations: {4:,} / " "h-index: {5} ({0})"
    ).format(date.today(), ntotal, nrefpapers, nfirst, ncitations, hindex)
    with open("tex/pubs_summary.tex", "w") as f:
        f.write(summary)
    ref = list(map(format_pub, zip(range(len(ref), 0, -1), ref)))
    unref = list(map(format_pub, zip(range(len(unref), 0, -1), unref)))
    
    with open("tex/pubs_ref.tex", "w") as f:
        f.write("\n\n".join(ref))
    with open("tex/pubs_unref.tex", "w") as f:
        f.write("\n\n".join(unref))